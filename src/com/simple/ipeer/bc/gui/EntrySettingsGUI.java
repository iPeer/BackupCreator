/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.simple.ipeer.bc.gui;

import com.simple.ipeer.bc.files.BackupFile;

/**
 *
 * @author iPeer
 */
public class EntrySettingsGUI extends javax.swing.JDialog {
       
    private BackupFile file;
    private ConfigGUI gui;
    private int row;
    private boolean custom = false;

    /**
     * Creates new form EntrySettingsGUI
     */
    
    public EntrySettingsGUI(BackupFile b, ConfigGUI gui, int row, boolean custom) {
	this.file = b;
	this.gui = gui;
	this.row = row;
	this.custom = custom;
	initComponents();
	entryPath.setText(b.path());
	backupPlace.setText(b.backupPath());
	if (b.isFile())
	    extensionsList.setEditable(false);
	else
	    extensionsList.setText(b.extensions());
    }    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entryPath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        backupPlace = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        extensionsList = new javax.swing.JTextField();
        addEntryButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Backup Entry Editor");
        setResizable(false);

        entryPath.setEditable(false);

        jLabel1.setText("Back this entry up in...");

        backupPlace.setText("<backupdir>/path/to/existing/file/");

        jLabel2.setText("Only back up files with the following extensions:");
        jLabel2.setToolTipText("Seperate each extension with a semi-colon. Leave blank to back up all files.");

        addEntryButton.setText("Add");
        addEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEntryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addEntryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(entryPath)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(extensionsList))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backupPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 259, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(entryPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backupPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(extensionsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addEntryButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEntryButtonActionPerformed
	BackupFile bp = new BackupFile(this.file.path(), this.file.isFile(), extensionsList.getText(), backupPlace.getText().replaceAll("<backupdir>", ""));
	if (!this.gui.fileList.isEmpty() && !this.custom)
	    this.gui.fileList.remove(this.row);
	this.gui.fileList.add(this.row, bp);
	this.gui.updateTable();
	this.dispose();
    }//GEN-LAST:event_addEntryButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEntryButton;
    public javax.swing.JTextField backupPlace;
    public javax.swing.JTextField entryPath;
    public javax.swing.JTextField extensionsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

}
